generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(cuid())
  email                 String          @unique
  role                  UserRoleTypes   @default(USER)
  name                  String?
  password              String?
  promocode             String?
  kycId                 String?         @unique
  kycStatus             KycStatusTypes  @default(NOT_VERIFIED)
  kycCallbacks          KycCallback[]
  kycResults            KycResult[]
  gleamCallbacks        GleamCallback[]
  rewards               Reward[]
  wallets               Wallet[]
  walletLogs            WalletLog[]
  sales                 UsersOnSales[]
  updatedAt             DateTime        @updatedAt
  createdAt             DateTime        @default(now())
}

model Wallet {
  id            String    @id @default(cuid())
  name          String
  value         String    @unique
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
}

model WalletLog {
  id            String    @id @default(cuid())
  name          String
  network       String
  address       String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  connectAt     DateTime  @default(now())
}

model MagicCode {
  id            String          @id @default(uuid())
  hashedCode    String
  email         String
  type          MagicCodeTypes  @default(SIGN_UP)
  expiresAt     DateTime
  createdAt     DateTime        @default(now())
}

model KycCallback {
  id            String    @id @default(cuid())
  kycId         String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  event         String
  createdAt     DateTime  @default(now())
}

model KycResult {
  id            String    @id @default(cuid())
  kycId         String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  firstName     String
  middleName    String?
  lastName      String?
  gender        String?
  country       String?
  dateOfBirth   String?
  createdAt     DateTime  @default(now())
}

model GleamCallback {
  id                String     @id @default(cuid())
  campaignKey       String
  campaignType      String
  entryMethodId     String
  entryType         String
  userEmail         String
  user              User?      @relation(fields: [userId], references: [id])
  userId            String?
  city              String?
  countryCode       String?
  socialProvider    String?
  socialReference   String?
  createdAt         DateTime    @default(now())
}

model UsersOnSales {
  user                  User              @relation(fields: [userId], references: [id])
  userId                String
  sale                  Sale              @relation(fields: [saleId], references: [id])
  saleId                String

  @@id([userId, saleId])
}

model Sale {
  id                  String    @id @default(cuid())
  title               String
  description         String?
  overview            String?
  users               UsersOnSales[]
  roadmap             RoadmapForSale[]
  teamMembers         TeamMemberForSale[]
  info                SaleInfoForSale?
  tokenInfo           TokenInfoForSale?
  startAt             DateTime?
  finishAt            DateTime?
  createdAt           DateTime  @default(now())
}

model RoadmapForSale {
  id              String    @id @default(cuid())
  sale            Sale      @relation(fields: [saleId], references: [id])
  saleId          String
  step            Int
  title           String
  startAt         DateTime?
  finishAt        DateTime?
}

model TeamMemberForSale {
  id              String    @id @default(cuid())
  sale            Sale      @relation(fields: [saleId], references: [id])
  saleId          String
  fullName        String
  role            String?
}

model SaleInfoForSale {
  id              String    @id @default(cuid())
  sale            Sale      @relation(fields: [saleId], references: [id])
  saleId          String    @unique
  tgeType         String?
  vesting         String?
  parachain       String?
  address         String
}

model TokenInfoForSale {
  id              String    @id @default(cuid())
  sale            Sale      @relation(fields: [saleId], references: [id])
  saleId          String    @unique
  title           String
  price           Int
  raise           Int
}

model Reward {
  id            String     @id @default(cuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  source        RewardSourceTypes
  action        RewardActionTypes
  prize         Int
  createdAt     DateTime   @default(now())
}

enum UserRoleTypes {
  ADMIN
  OWNER
  USER
}

enum RewardSourceTypes {
  INNER
  GLEAM
  KYC
}

enum RewardActionTypes {
  REGISTRATION
  BINANCE_WALLET
  POLKADOT_WALLET
  KYC_ACCEPTED
  SURVEY_COMPLETED
  TWITTER_FOLLOW
  TELEGRAM_FOLLOW
  BLOG_FOLLOW
}

enum MagicCodeTypes {
  SIGN_IN
  SIGN_UP
}

enum KycStatusTypes {
  NOT_VERIFIED
  IN_PROGRESS
  ACCEPTED
  DECLINED
  BLOCKED
}
